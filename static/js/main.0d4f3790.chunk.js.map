{"version":3,"sources":["utils/types.js","utils/helpers.js","reducers/humanReducer.js","store.js","types/index.js","actions/humanAction.js","components/Main/components/Cell/Cell.js","components/Main/components/Board/Board.js","components/Main/Main.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ICON_CHARS","PLAYER_TURNS","getEmptyCells","cells","map","val","idx","filter","item","isMoveLeft","length","getRandom","start","end","Math","floor","random","replace","index","value","slice","findRandomMove","emptyCells","minimax","depth","computerType","isMax","score","lines","i","a","b","c","evaluate","best","lengthCells","nextCells","max","min","makeAIMove","board","icon","bestMove","bestVal","moveVal","findBestMove","initialState","matchId","boardState","lastMove","char","position","currentIcon","playerTurn","gameState","isTie","store","createStore","state","action","console","log","type","payload","estado","lastBoard","gameType","iconType","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","f","getState","setGameState","setId","uuid","humanMove","printCPUMove","updateGameState","dispatch","checkGameState","Cell","useSelector","isDoneClass","useDispatch","humanPlay","uuidv4","setTimeout","cpuIndex","humanClick","className","onClick","Board","useEffect","initGame","Main","textInfo","Header","resetGame","Footer","href","target","rel","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d4f3790.chunk.js","sourcesContent":["export const GAME_TYPES = {\r\n    TWO_PLAYERS: 'two_players',\r\n    VS_CPU: 'vs_cpu',\r\n};\r\n\r\nexport const ICON_TYPES = {\r\n    O: 0,\r\n    X: 1,\r\n};\r\n\r\nexport const ICON_CHARS = ['O', 'X'];\r\n\r\nexport const PLAYER_TURNS = {\r\n    HUMAN: 0,\r\n    CPU: 1,\r\n};\r\n","const getEmptyCells = (cells) => {\r\n    return cells\r\n        .map((val, idx) => [val, idx])\r\n        .filter((item) => item[0] === '-');\r\n};\r\n\r\nconst isMoveLeft = (cells) => {\r\n    const emptyCells = getEmptyCells(cells);\r\n    return emptyCells.length > 0;\r\n};\r\n\r\nexport const checkGameState = (board) => {\r\n    const lines = [\r\n        [0, 1, 2], // h.h0\r\n        [3, 4, 5], // h.h1\r\n        [6, 7, 8], // h.h2\r\n        [0, 3, 6], // v.v0\r\n        [1, 4, 7], // v.v1\r\n        [2, 5, 8], // v.v2\r\n        [0, 4, 8], // d.d0\r\n        [2, 4, 6], // d.d1\r\n    ];\r\n\r\n    let position = '';\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n\r\n        if (\r\n            board[a] !== '-' &&\r\n            board[a] === board[b] &&\r\n            board[a] === board[c]\r\n        ) {\r\n            if (i >= 0 && i <= 2) position = `h h${i}`;\r\n            else if (i >= 3 && i <= 5) position = `v v${i - 3}`;\r\n            else position = `d${i - 6}`;\r\n\r\n            return {\r\n                position,\r\n                iconType: board[a],\r\n                isTie: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    return {\r\n        position: '',\r\n        iconType: null,\r\n        isTie: isMoveLeft(board) ? null : true,\r\n    };\r\n};\r\n\r\nexport const getRandom = (start, end) => {\r\n    return start + Math.floor(Math.random() * (end - start));\r\n};\r\n\r\nconst replace = (cells, index, value) => {\r\n    return [\r\n        ...cells.slice(0, index),\r\n        value,\r\n        ...cells.slice(index + 1, cells.length),\r\n    ];\r\n};\r\n\r\n/**\r\n * Random move\r\n */\r\nexport const findRandomMove = (cells) => {\r\n    const emptyCells = getEmptyCells(cells);\r\n\r\n    if (emptyCells.length > 0) {\r\n        const randomNum = getRandom(0, emptyCells.length);\r\n        const index = emptyCells[randomNum][1];\r\n\r\n        return index;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Find best move based on Minimax algorithm\r\n */\r\nconst evaluate = (cells, computerType) => {\r\n    const lines = [\r\n        [0, 1, 2], // h.h0\r\n        [3, 4, 5], // h.h1\r\n        [6, 7, 8], // h.h2\r\n        [0, 3, 6], // v.v0\r\n        [1, 4, 7], // v.v1\r\n        [2, 5, 8], // v.v2\r\n        [0, 4, 8], // d.d0\r\n        [2, 4, 6], // d.d1\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n\r\n        if (\r\n            cells[a] !== '-' &&\r\n            cells[a] === cells[b] &&\r\n            cells[a] === cells[c]\r\n        ) {\r\n            if (cells[a] === computerType) return 10;\r\n            return -10;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n};\r\n\r\n//minimax function that returns scores for diferent AI moves\r\n\r\nconst minimax = (cells, depth, computerType, isMax) => {\r\n    const score = evaluate(cells, computerType);\r\n    // If Maximizer has won the game return his/her evaluated score\r\n    if (score === 10) return score - depth;\r\n\r\n    // If Minimizer has won the game return his/her evaluated score\r\n    if (score === -10) return score + depth;\r\n\r\n    // If there are no more moves and no winner then it is a tie\r\n    if (!isMoveLeft(cells)) return 0;\r\n\r\n    const lengthCells = cells.length;\r\n    let best;\r\n\r\n    // If this maximizer's move\r\n    if (isMax) {\r\n        best = -1000;\r\n\r\n        for (let i = 0; i < lengthCells; i++) {\r\n            const cell = cells[i];\r\n\r\n            if (cell === '-') {\r\n                // Make a move\r\n                const nextCells = replace(cells, i, computerType);\r\n\r\n                // Call minimax recursively and choose the maximum value\r\n                best = Math.max(\r\n                    best,\r\n                    minimax(nextCells, depth + 1, computerType, !isMax),\r\n                );\r\n            }\r\n        }\r\n    } else {\r\n        best = 1000;\r\n\r\n        for (let i = 0; i < lengthCells; i++) {\r\n            const cell = cells[i];\r\n\r\n            if (cell === '-') {\r\n                // Make a move\r\n                const nextCells = replace(cells, i, 1 - computerType);\r\n\r\n                // Call minimax recursively and choose the minimum value\r\n                best = Math.min(\r\n                    best,\r\n                    minimax(nextCells, depth + 1, computerType, !isMax),\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    return best;\r\n};\r\n\r\n//Find the best move for computer player\r\nexport const findBestMove = (cells, computerType) => {\r\n    let bestVal = -1000;\r\n    let bestMove = null;\r\n\r\n    const lengthCells = cells.length;\r\n\r\n    for (let i = 0; i < lengthCells; i++) {\r\n        const cell = cells[i];\r\n\r\n        if (cell === '-') {\r\n            // Make a move\r\n            const nextCells = replace(cells, i, computerType);\r\n            // Compute evaluation function for this move.\r\n            const moveVal = minimax(nextCells, 0, computerType, false);\r\n            // If the value of the current move is more than the best value, then update best\r\n            if (moveVal > bestVal) {\r\n                bestVal = moveVal;\r\n                bestMove = i;\r\n            }\r\n        }\r\n    }\r\n\r\n    return bestMove;\r\n};\r\n\r\nexport const makeAIMove = (board, icon) => {\r\n    const bestMove = findBestMove(board, icon);\r\n\r\n    if (bestMove !== null && board[bestMove] === '-') {\r\n        return bestMove;\r\n    }\r\n};\r\n","import {\r\n    HUMAN_ACTION,\r\n    CHANGE_GAME_TYPE,\r\n    RESET_GAME,\r\n    CPU_ACTION,\r\n    GAME_UPDATE,\r\n    REVERT_MOVE,\r\n    SET_ID,\r\n    SET_BOARD_STATE,\r\n} from '../types';\r\nimport {\r\n    // GAME_TYPES,\r\n    PLAYER_TURNS,\r\n} from '../utils/types';\r\nimport { getRandom } from '../utils/helpers';\r\n\r\nconst initialState = {\r\n    matchId: '',\r\n    boardState: [\r\n        '-',\r\n        '-',\r\n        '-', // first row, positions 0, 1, 2\r\n        '-',\r\n        '-',\r\n        '-', // second row, positions 3, 4, 5\r\n        '-',\r\n        '-',\r\n        '-',\r\n    ],\r\n    lastMove: {\r\n        char: null, // char one of [1, 0], required\r\n        position: '', // number from 0 to 8, required\r\n        board: [\r\n            '-',\r\n            '-',\r\n            '-', // first row, positions 0, 1, 2\r\n            '-',\r\n            '-',\r\n            '-', // second row, positions 3, 4, 5\r\n            '-',\r\n            '-',\r\n            '-',\r\n        ],\r\n    },\r\n    currentIcon: getRandom(0, 2),\r\n    playerTurn: getRandom(0, 2),\r\n    gameState: {\r\n        position: '',\r\n        icon: null,\r\n        isTie: null,\r\n    },\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    console.log('state', state, 'type', action.type);\r\n\r\n    switch (action.type) {\r\n        case SET_ID:\r\n            return {\r\n                ...state,\r\n                matchId: action.payload,\r\n            };\r\n\r\n        case SET_BOARD_STATE:\r\n            return {\r\n                ...state,\r\n                lastMove: {\r\n                    char: action.payload.estado.currentIcon,\r\n                    board: action.payload.estado.boardState,\r\n                    position: action.payload.index,\r\n                },\r\n            };\r\n        case HUMAN_ACTION:\r\n            const lastBoard = state.lastMove.board;\r\n            return {\r\n                ...state,\r\n                ...(state.boardState[action.payload] = state.currentIcon),\r\n                lastMove: {\r\n                    ...state.lastMove,\r\n                    board: lastBoard,\r\n                },\r\n                currentIcon: state.currentIcon === 0 ? 1 : 0,\r\n                playerTurn: PLAYER_TURNS.CPU,\r\n            };\r\n\r\n        case CHANGE_GAME_TYPE:\r\n            return {\r\n                ...state,\r\n                gameType: action.payload,\r\n            };\r\n        case RESET_GAME:\r\n            return {\r\n                matchId: '',\r\n                boardState: [\r\n                    '-',\r\n                    '-',\r\n                    '-', // first row, positions 0, 1, 2\r\n                    '-',\r\n                    '-',\r\n                    '-', // second row, positions 3, 4, 5\r\n                    '-',\r\n                    '-',\r\n                    '-',\r\n                ],\r\n                lastMove: {\r\n                    char: null, // char one of ['o','x'], required\r\n                    position: '', // number from 0 to 8, required\r\n                    board: [\r\n                        '-',\r\n                        '-',\r\n                        '-', // first row, positions 0, 1, 2\r\n                        '-',\r\n                        '-',\r\n                        '-', // second row, positions 3, 4, 5\r\n                        '-',\r\n                        '-',\r\n                        '-',\r\n                    ],\r\n                },\r\n                currentIcon: getRandom(0, 2),\r\n                playerTurn: getRandom(0, 2),\r\n                gameState: {\r\n                    position: '',\r\n                    icon: null,\r\n                    isTie: null,\r\n                },\r\n            };\r\n        case CPU_ACTION:\r\n            // const lastBoardCPU = state.lastMove.board;\r\n            return {\r\n                ...state,\r\n                ...(state.boardState[action.payload] = state.currentIcon),\r\n                // ...(lastBoardCPU[action.payload] = state.currentIcon),\r\n                lastMove: {\r\n                    ...state.lastMove,\r\n                    board: state.boardState,\r\n                },\r\n                currentIcon: state.currentIcon === 0 ? 1 : 0,\r\n                playerTurn: PLAYER_TURNS.HUMAN,\r\n            };\r\n        case GAME_UPDATE:\r\n            return {\r\n                ...state,\r\n                gameState: {\r\n                    position: action.payload.position,\r\n                    icon: action.payload.iconType,\r\n                    isTie: action.payload.isTie,\r\n                },\r\n            };\r\n        case REVERT_MOVE: {\r\n            return {\r\n                ...state,\r\n                boardState: state.lastMove.board,\r\n                currentIcon: state.lastMove.char,\r\n                playerTurn: PLAYER_TURNS.HUMAN,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { reducer } from './reducers';\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n\r\n        typeof window === 'object' &&\r\n            typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined'\r\n            ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n            : (f) => f,\r\n    ),\r\n);\r\n\r\nexport default store;\r\n","export const HUMAN_ACTION = 'HUMAN_ACTION';\r\nexport const CHANGE_GAME_TYPE = 'CHANGE_GAME_TYPE';\r\nexport const RESET_GAME = 'RESET_GAME';\r\nexport const CPU_ACTION = 'CPU_ACTION';\r\nexport const GAME_UPDATE = 'GAME_UPDATE';\r\nexport const REVERT_MOVE = 'REVERT_MOVE';\r\nexport const SET_ID = 'SET_ID';\r\nexport const SET_BOARD_STATE = 'SET_BOARD_STATE';\r\n","import {\r\n    HUMAN_ACTION,\r\n    CHANGE_GAME_TYPE,\r\n    RESET_GAME,\r\n    CPU_ACTION,\r\n    GAME_UPDATE,\r\n    REVERT_MOVE,\r\n    SET_ID,\r\n    SET_BOARD_STATE,\r\n} from '../types/index';\r\nimport { checkGameState, makeAIMove, findRandomMove } from '../utils/helpers';\r\nimport store from '../store';\r\nimport { PLAYER_TURNS } from '../utils/types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst state = store.getState();\r\nconsole.log('state', state);\r\n\r\nexport function humanClick(index) {\r\n    return (dispatch) => {\r\n        //init with unique uuid\r\n        if (state.matchId === '') {\r\n            setId(uuidv4());\r\n        }\r\n\r\n        dispatch(setGameState(state, index));\r\n        //send info to cell and update state\r\n        dispatch(humanMove(index));\r\n        //calcular siguiente movimiento de la cpu (si no hay victoria de ningún jugador)\r\n        if (state.gameState.position === '') {\r\n            setTimeout(() => {\r\n                let { boardState, currentIcon } = store.getState();\r\n                const cpuIndex = makeAIMove(boardState, currentIcon);\r\n                dispatch(printCPUMove(cpuIndex));\r\n            }, 1000);\r\n        }\r\n    };\r\n}\r\n\r\nconst setGameState = (estado, index) => ({\r\n    type: SET_BOARD_STATE,\r\n    payload: { estado, index },\r\n});\r\n\r\nconst setId = (uuid) => ({\r\n    type: SET_ID,\r\n    payload: uuid,\r\n});\r\n\r\nconst humanMove = (index) => ({\r\n    type: HUMAN_ACTION,\r\n    payload: index,\r\n});\r\n\r\nexport function changeGameType(gameType) {\r\n    return (dispatch) => {\r\n        dispatch({ type: CHANGE_GAME_TYPE, payload: gameType });\r\n    };\r\n}\r\n\r\nexport function resetGame(board) {\r\n    return (dispatch) => {\r\n        //reset of the board\r\n        dispatch({ type: RESET_GAME });\r\n\r\n        const { playerTurn } = store.getState();\r\n        //if its cpu turn, cpu play\r\n        if (playerTurn === PLAYER_TURNS.CPU) {\r\n            const index = findRandomMove(board);\r\n            dispatch(printCPUMove(index));\r\n        }\r\n    };\r\n}\r\n\r\nconst printCPUMove = (idx) => ({ type: CPU_ACTION, payload: idx });\r\n\r\nconst printUpdateGameState = (gState) => {\r\n    return {\r\n        type: GAME_UPDATE,\r\n        payload: gState,\r\n    };\r\n};\r\n\r\nexport function updateGameState(board) {\r\n    return (dispatch) => {\r\n        const gameState = checkGameState(board);\r\n\r\n        dispatch(printUpdateGameState(gameState));\r\n    };\r\n}\r\n\r\nexport function initGame(board) {\r\n    const index = findRandomMove(board);\r\n\r\n    return (dispatch) => {\r\n        dispatch(printCPUMove(index));\r\n    };\r\n}\r\n\r\nexport function revertMove() {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: REVERT_MOVE,\r\n        });\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { humanClick } from '../../../../actions/humanAction';\r\nimport { ICON_CHARS, PLAYER_TURNS } from '../../../../utils/types';\r\n\r\nconst ICON_PLACEHOLDER = 'I';\r\n\r\nconst Cell = ({ index }) => {\r\n    const value = useSelector((state) => state.boardState[index]);\r\n    const icon = value !== '-' ? ICON_CHARS[value] : ICON_PLACEHOLDER;\r\n    const isDoneClass = icon !== ICON_PLACEHOLDER ? 'done' : '';\r\n    const playerTurn = useSelector((state) => state.playerTurn);\r\n    const position = useSelector((state) => state.gameState.position);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const humanPlay = (index) => dispatch(humanClick(index));\r\n\r\n    return (\r\n        <button\r\n            className={`cell cell-${index} ${isDoneClass}`}\r\n            onClick={\r\n                value === '-' &&\r\n                playerTurn === PLAYER_TURNS.HUMAN &&\r\n                position === ''\r\n                    ? () => humanPlay(index)\r\n                    : () => {}\r\n            }\r\n        >\r\n            {icon}\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default Cell;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { updateGameState, initGame } from '../../../../actions/humanAction';\r\nimport { PLAYER_TURNS } from '../../../../utils/types';\r\nimport Cell from '../Cell/Cell';\r\n\r\nconst Board = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const position = useSelector((state) => state.gameState.position);\r\n    const board = useSelector((state) => state.boardState);\r\n    const playerTurn = useSelector((state) => state.playerTurn);\r\n\r\n    dispatch(updateGameState(board));\r\n\r\n    useEffect(() => {\r\n        if (playerTurn === PLAYER_TURNS.CPU) {\r\n            dispatch(initGame(board));\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className={`board ${position} ${position !== '' ? 'full' : ''}`}>\r\n            <div className='board-row'>\r\n                <Cell index={0} />\r\n                <Cell index={1} />\r\n                <Cell index={2} />\r\n            </div>\r\n\r\n            <div className='board-row'>\r\n                <Cell index={3} />\r\n                <Cell index={4} />\r\n                <Cell index={5} />\r\n            </div>\r\n\r\n            <div className='board-row'>\r\n                <Cell index={6} />\r\n                <Cell index={7} />\r\n                <Cell index={8} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { PLAYER_TURNS } from '../../utils/types';\r\n// import { revertMove } from '../../actions/humanAction';\r\nimport Board from './components/Board/Board';\r\n\r\nconst Main = () => {\r\n    // const dispatch = useDispatch();\r\n\r\n    let textInfo = '';\r\n\r\n    const isTie = useSelector((state) => state.gameState.isTie);\r\n    const position = useSelector((state) => state.gameState.position);\r\n    const playerTurn = useSelector((state) => state.playerTurn);\r\n    // const lastMove = useSelector((state) => state.lastMove);\r\n\r\n    if (isTie) {\r\n        textInfo = 'Tie!';\r\n    } else {\r\n        if (position !== '' && playerTurn === PLAYER_TURNS.CPU) {\r\n            textInfo = 'You win!';\r\n        } else if (position !== '' && playerTurn === PLAYER_TURNS.HUMAN) {\r\n            textInfo = 'CPU win!';\r\n        } else if (playerTurn === PLAYER_TURNS.CPU) {\r\n            textInfo = `It's CPU`;\r\n        } else {\r\n            textInfo = 'It´s your turn';\r\n        }\r\n    }\r\n    return (\r\n        <main className='main'>\r\n            <div className='info'>{textInfo}</div>\r\n            <Board />\r\n            <div className='game-info'>\r\n                {/* {lastMove.position !== '' &&\r\n                playerTurn === PLAYER_TURNS.HUMAN ? (\r\n                    <p className='game-info__text'>\r\n                        If you want to revert your last move...\r\n                        <button\r\n                            type='button'\r\n                            className='game-info__button'\r\n                            onClick={() => {\r\n                                dispatch(revertMove());\r\n                            }}\r\n                        >\r\n                            Click here\r\n                        </button>\r\n                    </p>\r\n                ) : (\r\n                    ''\r\n                )} */}\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { resetGame } from '../../actions/humanAction';\r\n// import ButtonGameType from './components/Button';\r\n\r\nconst Header = () => {\r\n    const dispatch = useDispatch();\r\n    const board = useSelector((state) => state.boardState);\r\n    const playerTurn = useSelector((state) => state.playerTurn);\r\n    // const changeGType = (gameType) => dispatch(changeGameType(gameType));\r\n\r\n    return (\r\n        <header className='header'>\r\n            <h1 className='header__title'>Tic Tac Toe</h1>\r\n            {/* <ul className='header__player-selector'>\r\n                <ButtonGameType\r\n                    value={GAME_TYPES.TWO_PLAYERS}\r\n                    name='2 Players'\r\n                    onClick={() => changeGType(GAME_TYPES.TWO_PLAYERS)}\r\n                    gameType={gameType}\r\n                />\r\n                <ButtonGameType\r\n                    value={GAME_TYPES.VS_CPU}\r\n                    name='Versus Computer'\r\n                    onClick={() => changeGType(GAME_TYPES.VS_CPU)}\r\n                    gameType={gameType}\r\n                />\r\n            </ul> */}\r\n            <div className='header__container--new-game'>\r\n                <button\r\n                    className='header__new-game'\r\n                    onClick={() => dispatch(resetGame(board, playerTurn))}\r\n                >\r\n                    New Game\r\n                </button>\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className='footer'>\r\n            <a\r\n                className='footer__link'\r\n                href='https://github.com/eduper11/tic-tac-toe_react_redux'\r\n                target='_blank'\r\n                rel='noreferrer noopener'\r\n            >\r\n                Github\r\n            </a>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './styles/index.scss';\r\nimport Main from './components/Main/Main';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store={store}>\r\n            <div className='app'>\r\n                <Header />\r\n                <Main />\r\n                <Footer />\r\n            </div>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}